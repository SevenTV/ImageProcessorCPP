name: ImageProcessor Lint, Build, Test, Deploy

on:
  push:
    branches:
      - master
      - dev
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
  workflow_dispatch:
    inputs:
      deploy:
        description: "Deploy location"
        required: true
        default: "none"
        type: choice
        options:
          - production
          - staging
          - none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: ImageProcessor Lint, Build, Test, Deploy
    runs-on: aws-runner
    env:
      DEPLOY_PROD: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'production') || (github.event_name == 'push' && github.ref_type == 'branch' && github.ref_name == 'master') }}
      DEPLOY_STAGE: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'staging') || (github.event_name == 'push' && github.ref_type == 'branch' && github.ref_name == 'dev') || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'staged')) }}
      GOLANGCI_LINT_CACHE: /home/runner/.cache/golangci-lint
    concurrency:
      group: ${{ github.workflow }}-ci-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ env.DEPLOY_PROD == 'true' || env.DEPLOY_STAGE == 'true' }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        if: ${{ env.DEPLOY_PROD == 'true' || env.DEPLOY_STAGE == 'true' }}
        uses: aws-actions/amazon-ecr-login@v1

      - name: Make build context
        if: ${{ env.DEPLOY_PROD == 'true' || env.DEPLOY_STAGE == 'true' }}
        run: |
          docker context create builders

      - name: Setup buildx
        uses: docker/setup-buildx-action@v2
        if: ${{ env.DEPLOY_PROD == 'true' || env.DEPLOY_STAGE == 'true' }}
        with:
          install: true
          endpoint: builders

      - name: Build docker image
        uses: docker/build-push-action@v3
        if: ${{ env.DEPLOY_PROD == 'true' || env.DEPLOY_STAGE == 'true' }}
        with:
          context: .
          file: docker/full.Dockerfile
          cache-from: |
            type=registry,ref=gha
          cache-to: |
            type=registry,ref=gha,mode=max
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ (env.DEPLOY_PROD == 'true' && '7tv') || '7tv-stage' }}/image-processor:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ (env.DEPLOY_PROD == 'true' && '7tv') || '7tv-stage' }}/image-processor:${{ github.sha }}
          push: true

      - name: Update deployment template
        uses: danielr1996/envsubst-action@1.1.0
        if: ${{ env.DEPLOY_PROD == 'true' || env.DEPLOY_STAGE == 'true' }}
        env:
          IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ (env.DEPLOY_PROD == 'true' && '7tv') || '7tv-stage' }}/image-processor:${{ github.sha }}
        with:
          input: k8s/${{ (env.DEPLOY_PROD == 'true' && 'production') || 'staging' }}.template.yaml
          output: k8s/deploy.yaml

      - name: Setup Kubectl
        if: ${{ env.DEPLOY_PROD == 'true' || env.DEPLOY_STAGE == 'true' }}
        uses: azure/setup-kubectl@v3.0

      - name: Deploy to k8s
        if: ${{ env.DEPLOY_PROD == 'true' || env.DEPLOY_STAGE == 'true' }}
        env:
          KUBE_CONFIG_DATA: ${{ (env.DEPLOY_PROD == 'true' && secrets.KUBECONFIG) || secrets.KUBECONFIG_STAGE }}
        run: |
          mkdir -p ~/.kube
          (echo $KUBE_CONFIG_DATA | base64 -d) >> ~/.kube/config

          kubectl apply -f k8s/deploy.yaml
