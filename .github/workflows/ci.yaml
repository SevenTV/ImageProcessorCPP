on:
  push:
    branches:
      - master
      - dev
      - troy/init
  pull_request:
  workflow_call:
    inputs:
      deploy:
        description: "Deploy location"
        required: true
        default: "none"
        type: choice
        options:
          - production
          - staging
          - none
jobs:
  pre_job:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v4.0.0
        with:
          concurrent_skipping: same_content

  lint:
    name: Lint
    needs:
      - pre-job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-lint-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18.1

      - uses: actions/setup-node@v3
        with:
          node-version: "18"

      - uses: actions/setup-python@v3
        with:
          python-version: "3.8.10"

      - name: Checkout code
        uses: actions/checkout@v3

      - id: cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
          echo "::set-output name=python-pip::$(python3 -m pip cache dir)"

      - name: Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('go/go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('go/go.sum') }}

      - name: Python Pip Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-paths.outputs.python-pip }}
          key: ${{ runner.os }}-python-pip-${{ hashFiles('cpp/requirements.txt') }}

      - name: Node Modules Cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock') }}

      - name: install dev_deps
        run: make dev_deps

      - name: Run Lint
        run: make lint

  post-lint:
    runs-on: ubuntu-latest
    needs:
      - pre-job
        - lint
    if: ${{ needs.pre_job.outputs.should_skip != 'true' && failure() }}
    steps:
      - name: Cancel current workflow run
        uses: actions/github-script@v6
        with:
          script: |
            github.actions.cancelWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId
            })

  build:
    name: Build and Test
    runs-on: self-hosted
    needs:
      - pre-job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    concurrency:
      group: ${{ github.workflow }}-build-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - id: buildx-context
        run: |
          docker context create builders

      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
          endpoint: builders

      - name: Build the cache
        uses: docker/build-push-action@v2
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            image-processor:latest
          build-args: |
            "BUILDER=${{ github.actor }}"
            "VERSION=${{ github.sha }}"
          outputs: |
            type=docker,dest=image.tar
          target: final

      - name: Upload docker image
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: image.tar
          retention-days: 3

  deploy:
    name: Deploy
    needs:
      - build
      - lint
      - pre-job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' && ((github.event == 'workflow_call' && inputs.deploy != 'none') || (github.event == 'push' && github.ref_type == 'branch' && (github.ref_name == 'master' || github.ref_name == 'dev'))) }}
    runs-on: self-hosted
    concurrency:
      group: ${{ github.workflow }}-deploy-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - id: buildx-context
        run: |
          docker context create builders

      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
          endpoint: builders

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-image

      - name: Load image
        run: |
          docker load --input image.tar
          docker image ls -a
